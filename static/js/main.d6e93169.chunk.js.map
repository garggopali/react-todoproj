{"version":3,"sources":["logo.svg","components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleInput","e","target","id","onSubmit","preventDefault","Math","floor","random","text","type","placeholder","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","className","isComplete","onClick","icon","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6e93169.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useState,useEffect,useRef} from 'react';\r\nimport './TodoCss.css';\r\n\r\nfunction TodoForm(props) {\r\n  const [input,setInput] =useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef=useRef(null);\r\n   useEffect(() => {\r\ninputRef.current.focus();\r\n    });\r\n  \r\n  // 1 add items to the list\r\n  // 2 delete items from the list\r\n  // add items in the list, tere is 2 methods - 1st handleinput mathod and 2nd handlesubmit methos\r\nconst handleInput =e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  // 2nd method handlesubmit method\r\n  const handleSubmit = e => {\r\n    e.preventDefault();  // when button clicked then stop page load\r\n    \r\n    props.onSubmit({\r\n     // id:Date.now(),\r\n     id:Math.floor(Math.random() * 10000),\r\n      text:input\r\n    });\r\n    setInput('');\r\n  };\r\n  \r\n  return (\r\n    <form id=\"to-do-form\" onSubmit={handleSubmit}>\r\n        {props.edit ? (\r\n            <>\r\n            <input \r\n          type=\"text\" \r\n          placeholder='Update item'\r\n          value={input}\r\n          onChange={handleInput}\r\n          ref={inputRef}\r\n          />\r\n          <button type=\"submit\">Update</button> \r\n            </>\r\n        ) : \r\n        (\r\n            <>\r\n            <input \r\n          type=\"text\" \r\n          placeholder=\"Enter item\"\r\n          value={input}\r\n          onChange={handleInput}\r\n          ref={inputRef}\r\n          /> \r\n          <button type=\"submit\">Add</button> \r\n          </>\r\n        )}\r\n          </form>     \r\n      )\r\n    }\r\n    \r\n    export default TodoForm;","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoCss from './TodoCss.css';\r\n\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({todos,completeTodo,removeTodo,updateTodo}){\r\n    const [edit,setEdit] =useState({\r\n        id: null,\r\n        value:''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id,value);\r\n        setEdit({\r\n            id:null,\r\n            value:''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n    }\r\n\r\n    return todos.map((todo,index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n        key={index}>\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                    <RiCloseCircleLine  icon=\"trash\"\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon' \r\n                    />\r\n                    <TiEdit  onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'/>\r\n                    \r\n                </div>\r\n        </div>\r\n    ));\r\n}\r\nexport default Todo; ","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\nimport './TodoCss.css';\r\n\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos]=useState([]);\r\n\r\n    const addTodo=todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return;\r\n        }\r\n        const newTodos=[todo, ...todos];\r\n   \r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text  || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n    );\r\n   };\r\n   \r\n    const removeTodo =id=>{\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo =id => {\r\n        let updatedTodos=todos.map(todo =>{\r\n            if(todo.id===id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Today's Plan?</h1>\r\n          <TodoForm onSubmit={addTodo}></TodoForm>  \r\n          <Todo todos={todos} completeTodo={completeTodo} \r\n          removeTodo={removeTodo}\r\n          updateTodo={updateTodo}></Todo> \r\n           </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}